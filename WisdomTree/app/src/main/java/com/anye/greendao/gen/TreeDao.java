package com.anye.greendao.gen;

import java.util.List;
import android.database.Cursor;
import android.database.sqlite.SQLiteStatement;

import org.greenrobot.greendao.AbstractDao;
import org.greenrobot.greendao.Property;
import org.greenrobot.greendao.internal.DaoConfig;
import org.greenrobot.greendao.database.Database;
import org.greenrobot.greendao.database.DatabaseStatement;
import org.greenrobot.greendao.query.Query;
import org.greenrobot.greendao.query.QueryBuilder;

import com.xinlin.wisdomtree.entity.Tree;

// THIS CODE IS GENERATED BY greenDAO, DO NOT EDIT.
/** 
 * DAO for table "TREE".
*/
public class TreeDao extends AbstractDao<Tree, Long> {

    public static final String TABLENAME = "TREE";

    /**
     * Properties of entity Tree.<br/>
     * Can be used for QueryBuilder and for referencing column names.
     */
    public static class Properties {
        public final static Property Id = new Property(0, Long.class, "id", true, "_id");
        public final static Property Name = new Property(1, String.class, "name", false, "NAME");
        public final static Property Detail = new Property(2, String.class, "detail", false, "DETAIL");
        public final static Property ForestId = new Property(3, Long.class, "forestId", false, "FOREST_ID");
    }

    private DaoSession daoSession;

    private Query<Tree> forest_TreesQuery;

    public TreeDao(DaoConfig config) {
        super(config);
    }
    
    public TreeDao(DaoConfig config, DaoSession daoSession) {
        super(config, daoSession);
        this.daoSession = daoSession;
    }

    /** Creates the underlying database table. */
    public static void createTable(Database db, boolean ifNotExists) {
        String constraint = ifNotExists? "IF NOT EXISTS ": "";
        db.execSQL("CREATE TABLE " + constraint + "\"TREE\" (" + //
                "\"_id\" INTEGER PRIMARY KEY ," + // 0: id
                "\"NAME\" TEXT UNIQUE ," + // 1: name
                "\"DETAIL\" TEXT," + // 2: detail
                "\"FOREST_ID\" INTEGER);"); // 3: forestId
    }

    /** Drops the underlying database table. */
    public static void dropTable(Database db, boolean ifExists) {
        String sql = "DROP TABLE " + (ifExists ? "IF EXISTS " : "") + "\"TREE\"";
        db.execSQL(sql);
    }

    @Override
    protected final void bindValues(DatabaseStatement stmt, Tree entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(3, detail);
        }
 
        Long forestId = entity.getForestId();
        if (forestId != null) {
            stmt.bindLong(4, forestId);
        }
    }

    @Override
    protected final void bindValues(SQLiteStatement stmt, Tree entity) {
        stmt.clearBindings();
 
        Long id = entity.getId();
        if (id != null) {
            stmt.bindLong(1, id);
        }
 
        String name = entity.getName();
        if (name != null) {
            stmt.bindString(2, name);
        }
 
        String detail = entity.getDetail();
        if (detail != null) {
            stmt.bindString(3, detail);
        }
 
        Long forestId = entity.getForestId();
        if (forestId != null) {
            stmt.bindLong(4, forestId);
        }
    }

    @Override
    protected final void attachEntity(Tree entity) {
        super.attachEntity(entity);
        entity.__setDaoSession(daoSession);
    }

    @Override
    public Long readKey(Cursor cursor, int offset) {
        return cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0);
    }    

    @Override
    public Tree readEntity(Cursor cursor, int offset) {
        Tree entity = new Tree( //
            cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0), // id
            cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1), // name
            cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2), // detail
            cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3) // forestId
        );
        return entity;
    }
     
    @Override
    public void readEntity(Cursor cursor, Tree entity, int offset) {
        entity.setId(cursor.isNull(offset + 0) ? null : cursor.getLong(offset + 0));
        entity.setName(cursor.isNull(offset + 1) ? null : cursor.getString(offset + 1));
        entity.setDetail(cursor.isNull(offset + 2) ? null : cursor.getString(offset + 2));
        entity.setForestId(cursor.isNull(offset + 3) ? null : cursor.getLong(offset + 3));
     }
    
    @Override
    protected final Long updateKeyAfterInsert(Tree entity, long rowId) {
        entity.setId(rowId);
        return rowId;
    }
    
    @Override
    public Long getKey(Tree entity) {
        if(entity != null) {
            return entity.getId();
        } else {
            return null;
        }
    }

    @Override
    public boolean hasKey(Tree entity) {
        return entity.getId() != null;
    }

    @Override
    protected final boolean isEntityUpdateable() {
        return true;
    }
    
    /** Internal query to resolve the "trees" to-many relationship of Forest. */
    public List<Tree> _queryForest_Trees(Long forestId) {
        synchronized (this) {
            if (forest_TreesQuery == null) {
                QueryBuilder<Tree> queryBuilder = queryBuilder();
                queryBuilder.where(Properties.ForestId.eq(null));
                forest_TreesQuery = queryBuilder.build();
            }
        }
        Query<Tree> query = forest_TreesQuery.forCurrentThread();
        query.setParameter(0, forestId);
        return query.list();
    }

}
